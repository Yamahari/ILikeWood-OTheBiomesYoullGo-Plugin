buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${version_mc}-${version_major}.${version_minor}.${version_patch}"
group = 'yamahari.ilikewoodxbyg' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'ilikewoodxbyg'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
    flatDir {
        dir 'build/libs'
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources', 'src/data/resources']
        }
    }
}

def replaceVersions = tasks.register('replaceVersions', Copy) {
    it.outputs.upToDateWhen { false }
    it.from(sourceSets.main.resources) {
        include 'META-INF/mods.toml'
        expand 'version': version,
                'version_range_mc': version_range_mc,
                'version_range_loader':  version_range_loader,
                'version_range_forge': version_range_forge,
                'version_range_ilw': version_range_ilw,
                'version_range_byg': version_range_byg
    }
    it.into "$buildDir/resources/main/"
}

processResources {
    copy {
        from 'src/data/resources/assets/ilikewood/lang'
        into 'src/data/resources/assets/ilikewoodxbyg/lang'
    }
    exclude 'META-INF/mods.toml'
    configure {
        finalizedBy replaceVersions
    }
}

classes.configure {
    dependsOn(replaceVersions)
}

configurations {
    ilikewood
    runtimeOnly.extendsFrom(ilikewood)
}

dependencies {
    minecraft "net.minecraftforge:forge:${version_mc}-${version_forge}"

    compileOnly fg.deobf("build.libs:ilikewood:${version_mc}-${version_ilw}:api")

    ilikewood fg.deobf("build.libs:ilikewood:${version_mc}-${version_ilw}")
    runtimeOnly fg.deobf("build.libs:byg:${version_mc}-${version_byg}")
}

minecraft {
    mappings channel: 'official', version: "${version_mc}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            mods {
                ilikewoodxbyg {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            mods {
                ilikewoodxbyg {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'ilikewood.datagen.modid', 'byg'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            args '--mod', 'ilikewood',
                    '--all',
                    '--output', file('src/data/resources/'),
                    '--existing', file('src/main/resources/'),
                    '--existing', configurations.ilikewood.asPath,
                    '--existing-mod', 'byg'
            mods {
                ilikewoodxbyg {
                    source sourceSets.main
                }
            }
        }
    }
}

jar {
    sourceSets.main.resources {
        exclude 'assets/byg/**'
        exclude '.cache'
    }
    manifest {
        attributes([
            "Specification-Title": "ilikewoodxbyg",
            "Specification-Vendor": "yamahari",
            "Specification-Version": "${project.version}",
            "Implementation-Title": "ilikewoodxbyg",
            "Implementation-Version": "${project.version}",
            "Implementation-Vendor" :"yamahari",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Automatic-Module-Name": "ilikewoodxbyg"
        ])
    }
    finalizedBy 'reobfJar'
}